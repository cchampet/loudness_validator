Import( 'env' )
Import( 'buildMode' )

# check libsndfile
conf = Configure(env)
if not conf.CheckLibWithHeader('sndfile', 'sndfile.h', 'c'):
    print 'Error: did not find sndfile library, exiting.'
    Exit(1)
env = conf.Finish()

# check boost accumulators (header only library) 
conf = Configure(env)
if not conf.CheckCXXHeader('boost/accumulators/accumulators.hpp'):
    print 'Error: did not find boost accumulators headers, exiting.'
    Exit(1)
env = conf.Finish()


# loudnessAnalyser shared library
loudnessAnalyserLib = env.SharedLibrary(
    'loudnessAnalyser',
    Glob( 'loudnessAnalyser/*.cpp' ) +
    Glob( 'loudnessAnalyser/utils/*.cpp' ),
)

# loudnessAnalyser static library
loudnessAnalyserLibStatic = env.StaticLibrary(
    'loudnessAnalyser',
    Glob( 'loudnessAnalyser/*.cpp' ) +
    Glob( 'loudnessAnalyser/utils/*.cpp' ),
)

# loudnessTools shared library
loudnessToolsLib = env.SharedLibrary(
    'loudnessTools',
    Glob( 'tool/*/*.cpp' ),
    LIBS = [
        "sndfile",
    ],
)

# loudnessTools static library
loudnessToolsLibStatic = env.StaticLibrary(
    'loudnessTools',
    Glob( 'tool/*/*.cpp' ),
    LIBS = [
        "sndfile",
    ],
)

env.Alias( 'install', env.InstallVersionedLib( 'lib', loudnessAnalyserLib ) )
env.Alias( 'install', env.Install( 'lib', loudnessAnalyserLibStatic ) )

env.Alias( 'install', env.InstallVersionedLib( 'lib', loudnessToolsLib ) )
env.Alias( 'install', env.Install( 'lib', loudnessToolsLibStatic ) )

env.Alias( 'install', env.Install( 'include/loudnessAnalyser', "loudnessAnalyser/LoudnessAnalyser.hpp" ) )

Export( 'loudnessAnalyserLibStatic' )
Export( 'loudnessToolsLibStatic' )
